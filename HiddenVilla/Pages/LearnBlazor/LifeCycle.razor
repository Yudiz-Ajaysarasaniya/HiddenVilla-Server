@page "/lifecycle"
@using System.Threading

<h3>LifeCycle</h3>
@* <PageTitle>LifeCycle</PageTitle> *@

<div class="border">
    <LifeCycleComponent CountValue="@currentCount"></LifeCycleComponent>
</div>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br />
@Count <br />
<button @onclick="StartCount">Start CountDown</button>

@foreach (var item in EvenType)
{
    @item
    <hr />
}

@code {
    private int currentCount = 0;
    private List<string> EvenType = new List<string>();
    private int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EvenType.Add("OnInitialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EvenType.Add("OnInitializedAsync is called");
        await Task.Delay(1000);
    }

    protected override void OnParametersSet()
    {
        EvenType.Add("OnParametersSet is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EvenType.Add("OnParametersSetAsync is called");
        await Task.Delay(1000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        EvenType.Add("OnAfterRender is called");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EvenType.Add("OnAfterRenderAsync is called");
        await Task.Delay(1000);
    }

    protected override bool ShouldRender()
    {
        EvenType.Add("ShouldRender is called");
        return true;
    }

    void StartCount()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if(Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}

